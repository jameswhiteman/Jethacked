<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>moveForce = 800
moveImpulse = 20
jumpForce = 1600
jumpImpulse = 100
maxAirSpeed = 50
maxGroundSpeed = 25
juiceMax = 800
juice = juiceMax
gamepad = true
joystickTolerance = 0.1
onGround = false

phy_fixed_rotation = true

//particles
partSys = part_system_create();


particle1 = part_type_create();
part_type_shape(particle1,pt_shape_line);
part_type_size(particle1,0.20,0.60,0,0);
part_type_scale(particle1,0.35,2.20);
part_type_color3(particle1,16749459,33023,255);
part_type_alpha3(particle1,0.04,0.06,0.07);
part_type_speed(particle1,0.80,2.80,0.02,0);
part_type_direction(particle1,268,272,0,9);
part_type_gravity(particle1,0,270);
part_type_orientation(particle1,0,0,10,20,1);
part_type_blend(particle1,1);
part_type_life(particle1,5,10);

emitter1 = part_emitter_create(partSys);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>left = keyboard_check(vk_left) || keyboard_check(ord('A'))
right = keyboard_check(vk_right) || keyboard_check(ord('D'))
jump = keyboard_check(vk_up) || keyboard_check(ord('W')) || keyboard_check(vk_space) || joystick_check_button(0, 3)
dash = keyboard_check_pressed(ord('K'))
shoot = keyboard_check_pressed(ord('J'))
parry = keyboard_check_pressed(ord('L'))

part_emitter_region(partSys,emitter1,x - 10 * image_xscale + 6,x - 10 * image_xscale + -6,y + 5 + 4,y + 5 + -4,ps_shape_ellipse,1);
onGround = place_meeting(x, y + 1, par_block)

part_emitter_region(partSys,emitter1,x - 10 * image_xscale + 6,x - 10 * image_xscale + -6,y + 5 + 4, y + 5 + -4,ps_shape_ellipse,1);
if gamepad
{
    if abs(joystick_xpos(0)) &gt; joystickTolerance
    {
        image_xscale = sign(joystick_xpos(0))
        if onGround
           physics_apply_impulse(phy_com_x, phy_com_y, joystick_xpos(0) * moveImpulse, 0)
        else if juice &gt; 0
        {
            physics_apply_force(phy_com_x, phy_com_y, joystick_xpos(0) * moveForce, 0)
            part_emitter_burst(partSys,emitter1,particle1,10);
            juice-=2
        }
    }
}
if left
{
    image_xscale = -1
    if onGround
       physics_apply_impulse(phy_com_x, phy_com_y, -moveImpulse, 0)
    else if juice &gt; 0
    {
        physics_apply_force(phy_com_x, phy_com_y, -moveForce, 0)
        part_emitter_burst(partSys,emitter1,particle1,10);
        juice--
    }
}
else if right
{
    image_xscale = 1
    if onGround
        physics_apply_impulse(phy_com_x, phy_com_y, moveImpulse, 0)
     else if juice &gt; 0
    {
        physics_apply_force(phy_com_x, phy_com_y, moveForce, 0)
        part_emitter_burst(partSys,emitter1,particle1,10);
        juice--
    }
}
if jump
{
    if onGround
       physics_apply_impulse(phy_com_x, phy_com_y, 0, -jumpImpulse)
    else if juice &gt; 0
    {
        physics_apply_force(phy_com_x, phy_com_y, 0, -jumpForce)
        part_emitter_burst(partSys,emitter1,particle1,10);
        juice-=2
    }
}

if dash
{
    //physics_apply_force(phy_com_x, phy_com_y, phy_linear_velocity_x * dashForce, phy_linear_velocity_y * dashForce);
}
if shoot
{
    var i;
    i = instance_create(x, y, blast);
    i.parent = id
}
if parry
{
    var i;
    i = instance_create(x, y, reflect);
    i.parent = id
}

if onGround
{
    juice = min(juiceMax, juice + 2)
    phy_speed_x = min(maxGroundSpeed, phy_speed_x)
    phy_speed_y = min(maxGroundSpeed, phy_speed_y)
}
else
{
    phy_speed_x = min(maxAirSpeed, phy_speed_x)
    phy_speed_y = min(maxAirSpeed, phy_speed_y)
}

juice = max(0, juice)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="par_block">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//invoke collisions
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(0, 0, string(juice))
if image_xscale &gt; 0
   draw_healthbar(x - 11, y - 10, x - 9, y, juice/juiceMax*100, c_black, c_red, c_green, 3, false, false)
else
    draw_healthbar(x + 9, y - 10, x + 11, y, juice/juiceMax*100, c_black, c_red, c_green, 3, false, false) 
draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>1.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.200000002980232</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,0</point>
    <point>32,32</point>
    <point>0,32</point>
  </PhysicsShapePoints>
</object>
